plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "jacoco"
}

group = 'com.jinddung2'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

task copyFiles(type: Copy) {
    copy {
        from './givemeticon-config'
        include "*.yml"
        into 'src/main/resources'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation 'org.springframework.security:spring-security-crypto'

    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.24.3'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.2'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // test 작업이 끝나고 jacocoTestReport를 실행
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test // jacocoTestReport에 test라는 종속성을 추가
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/config/*Config*",
                            "**/config/*Config*",
                            "**/annotation/**",
                            "**/dto/*Dto*",
                            "**/request/*Request*",
                            "**/response/*Response*",
                            "**/exception/*Exception*",
                            "**/mapper/*Mapper*",
                            "**/*Dao*",
                            "**/*Generator*",
                            "**/constants/*Constants*",
                            "**/oauth/**"
                    ])
                })
        )
    }
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }

            excludes = [
                    "**/*Application*",
                    "**/config/*Config*",
                    "**/annotation/**",
                    "**/aop/**",
                    "**/dto/*Dto*",
                    "**/request/*Request*",
                    "**/response/*Response*",
                    "**/exception/*Exception*",
                    "**/mapper/*Mapper*",
                    "**/*Dao*",
                    "**/*Generator*",
                    "**/constants/*Constants*",
                    "**/oauth/**",
                    "**/account/**"
            ]
        }
    }
}